List - interface
Here are next implementations:
    1) ArrayList
    2) LinkedList
 List list = new ArrayList();
 List list = new LinkedList();

 ArrayList - array without fix size
 int[] data = new int[10];
 [0,1,2,3,4,5];

 LinkedList - like train
 (1)->(2)->(3)->(4)
 add(5)
 (1)->(2)-(3)->(4)->(5)
 -------------------------------------------------------
 List:
  1) no uniqueue
  2) index access get(i);
  3) has order. In the order you added the same order when you get\read

 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 Set - interface
 Here are next implementations:
    1) HashSet
    2) LinkedHashSet
    3) TreeSet
 Set set = new HashSet();
 Set set = new LinkedHashSet();
 Set set = new TreeSet()
 ---------------------------------------------------
 Set:
    1) unique
    2) no index access
    3) has no order

 HashSet:
    1) unique - define as equals/hashCode

 LinkedHashSet:
    1) unique - define as equals/hashCode
    3) has order

 TreeSet:
    1) unique - define as Comparator -1, 0 ,1
    4) supports sorting (only for TreeSet)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Map - interface
Here are next implementations:
    1) HashMap
    2) LinkedHashMap
    3) TreeMap

Map map = new HashMap();
Map map = new LinkedHashMap();
Map map = new TreeMap();

    1) map - (key,value) pairs
    2) all logic applies by keys
    3) keys is Set
    4) Depending on type of Map - we have corresponding Set
    HashMap - keys HashSet
    LinkedHashMap - keys LinkedHashSet
    TreeMap - keys TreeSet
------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Old collections
1) HashTable hashtable = new HashTable() - legacy HashMap
Map map = new HashTable();

2) Vector
Vector vector = new Vector() - legacy ArrayList
List list = new Vector();




































